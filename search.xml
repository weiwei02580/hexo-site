<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flutter蛋播所有插件</title>
    <url>/hexo-site/2021/09/30/Flutter%E8%9B%8B%E6%92%AD%E6%89%80%E6%9C%89%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>Flutter 蛋播星球所有插件，人力搬运，后期会备注每个插件的作用<br>蛋播是我见过交互做的最好的 App</p>
<span id="more"></span>

<ul>
<li>StackWalker</li>
<li>_fe_analyzer_shared</li>
<li>aFileChooser</li>
<li>analyzer</li>
<li>angle</li>
<li>animated_text_kit</li>
<li>args</li>
<li>asn1lib</li>
<li>async</li>
<li>auth_header</li>
<li>base</li>
<li>boolean_selector</li>
<li>boringssl</li>
<li>bot_toast</li>
<li>build</li>
<li>build_config</li>
<li>build_daemon</li>
<li>build_resolvers</li>
<li>build_runner</li>
<li>build_runner_core</li>
<li>built_value</li>
<li>cached_network_image</li>
<li>carousel_slider</li>
<li>characters</li>
<li>charcode</li>
<li>checked_yaml</li>
<li>cli_util</li>
<li>clock</li>
<li>code_builder</li>
<li>collection</li>
<li>colorama</li>
<li>connectivity</li>
<li>connectivity_for_web</li>
<li>connectivity_macos</li>
<li>connectivity_platform_interface</li>
<li>convert</li>
<li>crypto</li>
<li>cupertino_icons</li>
<li>curved_navigation_bar</li>
<li>dan_video</li>
<li>dart</li>
<li>dart_des</li>
<li>dart_style</li>
<li>dartx</li>
<li>device_info</li>
<li>device_info_flatform_interface</li>
<li>dio</li>
<li>dio_http_cache</li>
<li>double-conversion</li>
<li>encrypt</li>
<li>engine</li>
<li>etc1</li>
<li>extended_image</li>
<li>extended_image_library</li>
<li>fake_async</li>
<li>ffi</li>
<li>fijkplayer</li>
<li>file</li>
<li>files</li>
<li>firebase</li>
<li>firebase_analytics</li>
<li>firebase_analytics_flatform_interface</li>
<li>firebase_analytics_web</li>
<li>firebase_core</li>
<li>firebase_core_flatform_interface</li>
<li>firebase_core_web</li>
<li>firebase_crashlytics</li>
<li>fixnum</li>
<li>flutter</li>
<li>flutter_app_upgrade</li>
<li>flutter_blurhash</li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter基础</title>
    <url>/hexo-site/2021/09/30/flutter%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>在 vscode 运行安卓项目时需注意各 sdk 的配置，在 android 根目录 <code>local.properties</code> 中修改各环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.gradle.java.home=C:\\Program Files\\Java\\jdk1.8.0_291</span><br><span class="line">sdk.dir=C:\\Users\\Administrator\\AppData\\Local\\Android\\sdk</span><br><span class="line">flutter.sdk=D:\\application\\flutter</span><br></pre></td></tr></table></figure>

<p><a href="https://dartpad.cn/">在线 dartpad</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>Flutter插件</title>
    <url>/hexo-site/2021/09/30/flutter%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>国际站 <a href="https://pub.dev/">pub.dev</a><br>国内站 <a href="https://pub.flutter-io.cn/">pub.flutter-io.cn</a></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>添加插件的方法 <code>flutter pub add packageName</code> 或者修改 <code>pubspec.yaml</code> 后 <code>flutter packages get</code></p>
<h4 id="flutter-screenutil-屏幕适配插件"><a href="#flutter-screenutil-屏幕适配插件" class="headerlink" title="flutter_screenutil 屏幕适配插件"></a>flutter_screenutil 屏幕适配插件</h4><h4 id="url-launcher-打电话，发邮件，访问-url"><a href="#url-launcher-打电话，发邮件，访问-url" class="headerlink" title="url_launcher 打电话，发邮件，访问 url"></a>url_launcher 打电话，发邮件，访问 url</h4><h4 id="card-swiper-轮播插件"><a href="#card-swiper-轮播插件" class="headerlink" title="card_swiper 轮播插件"></a>card_swiper 轮播插件</h4><h4 id="dio-网络请求"><a href="#dio-网络请求" class="headerlink" title="dio 网络请求"></a>dio 网络请求</h4><h4 id="get-状态管理"><a href="#get-状态管理" class="headerlink" title="get 状态管理"></a>get 状态管理</h4><h4 id="shared-preferences-本地存储"><a href="#shared-preferences-本地存储" class="headerlink" title="shared_preferences 本地存储"></a>shared_preferences 本地存储</h4><h4 id="flutter-native-splash-闪屏插件"><a href="#flutter-native-splash-闪屏插件" class="headerlink" title="flutter_native_splash 闪屏插件"></a>flutter_native_splash 闪屏插件</h4>]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>learning-status</title>
    <url>/hexo-site/2021/11/15/learning-status/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><span id="more"></span>

<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul>
<li>Vue3+ElementPlus+Koa2 全栈开发后台系统 -&gt; 7-9</li>
<li>Vue2.5 实战微信读书 媲美原生 App 的企业级 web 书城</li>
<li>全网稀缺 Vue 2.0 高级实战 独立开发专属音乐 WebAPP</li>
</ul>
<h2 id="开发一款-npm"><a href="#开发一款-npm" class="headerlink" title="开发一款 npm"></a>开发一款 npm</h2><ol>
<li>commander</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; program &#125; = <span class="built_in">require</span>(<span class="string">&quot;commander&quot;</span>);</span><br><span class="line">program.version(<span class="string">&quot;0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">program.option(<span class="string">&quot;-n &quot;</span>, <span class="string">&quot;输出名称&quot;</span>);</span><br><span class="line">program.option(<span class="string">&quot;-t --type &lt;type&gt; &quot;</span>, <span class="string">&quot;输出名称&quot;</span>);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = program.opts();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;opts=&gt;&quot;</span>, options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// figlet // console 大文字</span></span><br><span class="line"><span class="comment">// chalk // console 彩色文字</span></span><br><span class="line"><span class="comment">// inquirer //console 选择交互</span></span><br><span class="line"><span class="comment">// shelljs //</span></span><br><span class="line"><span class="comment">// ora //</span></span><br><span class="line"><span class="comment">// download-git-repo //</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><ul>
<li>系统入门到项目实战 趁早学习提高职场竞争力 -&gt; 4-8</li>
</ul>
<hr>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><blockquote>
<p>生态：redux dva MobX redux-thunk umi</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// redux-thunk 可以返回一个fn</span></span><br><span class="line"><span class="comment">// redux-saga  拦截同名的action</span></span><br></pre></td></tr></table></figure>

<ul>
<li>React 全家桶+AntD 单车后台管理系统开发</li>
<li>ReactHooks 重构去哪网购票</li>
<li>用 React.js+Egg.js 造轮子 全栈开发旅游电商应用</li>
<li>React16+React-Router4 从零打造企业级电商后台管理系统</li>
<li>React16.8+Next.js+Koa2 开发 Github 全栈项目</li>
<li>Electron+React+七牛云 实战跨平台桌面应用</li>
</ul>
<hr>
<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React-Native"></a>React-Native</h2><ul>
<li>React Native+Redux 打造高质量上线 App</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * react-navigation 6.x</span></span><br><span class="line"><span class="comment"> * 按照官网安装三个插件，ios  npx pod-install ios</span></span><br><span class="line"><span class="comment"> * android 修改 MainActivity.java</span></span><br><span class="line"><span class="comment"> * 此过程中 <span class="doctag">@react</span>-navigation 缺失的依赖 需要重新手动安装</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">// ctrl + M 调出菜单</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ReactNative + TypeScript 仿喜马拉雅开发 App -&gt; 粗略接触</li>
<li>新版 React Native+Redux 打造高质量上线 App -&gt; 重点在调用 native modules、code push、屏幕适配</li>
</ul>
<hr>
<h1 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h1><ul>
<li>flutter 移动电商实战</li>
<li>Flutter 从入门到进阶实战携程网 App -&gt;</li>
</ul>
<blockquote>
<p>笔记</p>
</blockquote>
<ol>
<li>安卓的环境变量</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># local.properties</span></span><br><span class="line"><span class="meta">org.gradle.java.home</span>=<span class="string">C:\\Program Files\\Java\\jdk1.8.0_291</span></span><br><span class="line"><span class="meta">sdk.dir</span>=<span class="string">C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk</span></span><br><span class="line"><span class="meta">ndk.dir</span>=<span class="string">C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\ndk-bundle</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>JAVA_HOME 环境变量指向 <code>bin</code> 上一级</li>
<li>DIO 访问 地址使用 ip/域名，不可使用 localhost</li>
</ol>
<h1 id="微前端"><a href="#微前端" class="headerlink" title="微前端"></a>微前端</h1><ul>
<li>从零打造微前端框架：实战“汽车资讯平台”项目</li>
</ul>
<hr>
<h1 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h1><blockquote>
<p>对称加密</p>
</blockquote>
<ul>
<li>收发用同一个私钥</li>
</ul>
<blockquote>
<p>非对称加密</p>
</blockquote>
<ol>
<li>通过私钥获取公钥</li>
<li>通过私钥加密 -&gt; 生成签名</li>
<li>信息、公钥、签名 -&gt; 验证</li>
</ol>
<p><code>vorpal</code> 命令行工具<br><code>cli-table</code> 命令行输出表格美化<br><code>dgram</code> 处理 udp</p>
<h2 id="truffle-sol-合约开发工具"><a href="#truffle-sol-合约开发工具" class="headerlink" title="truffle sol 合约开发工具"></a><code>truffle</code> sol 合约开发工具</h2><p><code>truffle compile</code> 编译<br><code>truffle migrate</code> 部署<br><code>truffle migrate --reset --all</code> 重新部署<br><code>truffle test</code> 测试</p>
<p>进度：04-13</p>
<blockquote>
<p>已学完</p>
</blockquote>
<ul>
<li>数据可视化</li>
<li>Vue 全家桶+SSR+Koa2 全栈开发美团网</li>
<li>React 16+Redux+React Router 4 Node.Js 全栈开发招聘 App 项目实战视频</li>
<li>Taro 小程序</li>
</ul>
<h1 id="感兴趣"><a href="#感兴趣" class="headerlink" title="感兴趣"></a>感兴趣</h1><ul>
<li>量化交易</li>
<li>three.js</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>react</title>
    <url>/hexo-site/2021/11/15/react/</url>
    <content><![CDATA[<h1 id="react"><a href="#react" class="headerlink" title="react"></a>react</h1><p>react 相关技术栈</p>
<span id="more"></span>

<h2 id="create-react-app-修改-webpack"><a href="#create-react-app-修改-webpack" class="headerlink" title="create-react-app 修改 webpack"></a>create-react-app 修改 webpack</h2><ol>
<li>安装插件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add antd babel-plugin-import less less-loader@^7.3.0</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写使用 less</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: lessRegex,</span><br><span class="line">    <span class="attr">exclude</span>: lessModuleRegex,</span><br><span class="line">    <span class="attr">use</span>: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">importLoaders</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">sourceMap</span>: isEnvProduction</span><br><span class="line">            ? shouldUseSourceMap</span><br><span class="line">            : isEnvDevelopment,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">lessOptions</span>: &#123; <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>.valueOf, <span class="attr">modifyVars</span>: &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;#1DA57A&#x27;</span> &#125; &#125;, <span class="comment">// babel-plugin-import 配置完</span></span><br><span class="line">        &#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="attr">sideEffects</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: lessModuleRegex,</span><br><span class="line">    <span class="attr">use</span>: getStyleLoaders(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">importLoaders</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">sourceMap</span>: isEnvProduction</span><br><span class="line">        ? shouldUseSourceMap</span><br><span class="line">        : isEnvDevelopment,</span><br><span class="line">        <span class="attr">modules</span>: &#123;</span><br><span class="line">            <span class="attr">getLocalIdent</span>: getCSSModuleLocalIdent,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写 babel-plugin-import 配置</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.修改getStyleLoaders方法</span></span><br><span class="line">  <span class="keyword">const</span> getStyleLoaders = <span class="function">(<span class="params">cssOptions, preProcessor, preProcessorOptions = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">    <span class="keyword">if</span> (preProcessor) &#123;</span><br><span class="line">      loaders.push(</span><br><span class="line">        <span class="comment">// something</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="built_in">require</span>.resolve(preProcessor),</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">            ...preProcessorOptions</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loaders;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// 2. 修改rules</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|mjs|jsx|ts|tsx)$/</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">                [<span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">libraryName</span>: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">                        <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">                        <span class="attr">style</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            ].filter(<span class="built_in">Boolean</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h1><h2 id="HashRouter、BrowserRouter"><a href="#HashRouter、BrowserRouter" class="headerlink" title="HashRouter、BrowserRouter"></a>HashRouter、BrowserRouter</h2><h2 id="Route-用法"><a href="#Route-用法" class="headerlink" title="Route 用法"></a>Route 用法</h2><h3 id="V5"><a href="#V5" class="headerlink" title="V5"></a>V5</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&#x27;/admin/ui/buttons&#x27;</span> component=&#123;Buttons&#125; /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/admin/ui/modals&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Modals&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/admin&#x27;</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Admin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/admin/home&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Admin</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125;&#125; /&gt;</span></span><br><span class="line"><span class="comment">// Link</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/&#x27;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>&#x27;/<span class="attr">three</span>/<span class="attr">7</span>&#x27;&#125;&#125;&gt;</span>Three #7<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 定义 &lt;Route path=&#x27;/three/:number&#x27; /&gt; 取值：this.prosp.match.params.number</span></span><br><span class="line"><span class="comment">// Switch 精准匹配第一个</span></span><br><span class="line"><span class="comment">// exact 完全匹配</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/admin/ui/buttons&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Buttons&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&#x27;/admin/ui/modals&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Modals&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;noMatch&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="comment">// Redirect</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#x27;/admin/home&#x27;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="V6"><a href="#V6" class="headerlink" title="V6"></a>V6</h3><p><a href="https://blog.csdn.net/weixin_40906515/article/details/104957712">React-Router v6 新特性解读及迁移指南</a></p>
<h2 id="React-新特性简介及-context-的使用"><a href="#React-新特性简介及-context-的使用" class="headerlink" title="React 新特性简介及 context 的使用"></a>React 新特性简介及 context 的使用</h2><ul>
<li>Context</li>
<li>ContextType</li>
<li>lazy/Suspense</li>
<li>memo</li>
</ul>
<h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p><code>&lt;Provider&gt;</code> <code>&lt;Consumer&gt;</code> 多个 Context 嵌套使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> BatteryContext = createContext();</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">BatteryContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;60&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Middle</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">BatteryContext.Provider</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Middle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Leaf</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">BatteryContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;(battery) =&gt; <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Battery:&#123;battery&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">BatteryContext.Consumer</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ContextType-渲染-jsx-之前提前获取-Consumer-的值"><a href="#ContextType-渲染-jsx-之前提前获取-Consumer-的值" class="headerlink" title="ContextType 渲染 jsx 之前提前获取 Consumer 的值"></a>ContextType 渲染 jsx 之前提前获取 Consumer 的值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> BatteryContext = createContext();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = BatteryContext; <span class="comment">// 静态属性赋值</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> battery = <span class="built_in">this</span>.context; <span class="comment">// 会自动生成context属性，值就是provider的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Battery:&#123;battery&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="lazy-和-Suspense-运行性能-api"><a href="#lazy-和-Suspense-运行性能-api" class="headerlink" title="lazy 和 Suspense 运行性能 api"></a>lazy 和 Suspense 运行性能 api</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lazy, Suspense &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>; <span class="comment">// Suspense异步渲染空挡显示</span></span><br><span class="line"><span class="keyword">const</span> About = lazy(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&quot;./About.jsx&quot;</span>));</span><br><span class="line"><span class="comment">// ErrorBoundary 错误边界，当About加载失败的时候</span></span><br><span class="line"><span class="comment">// componentDidCatch</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        hasError=<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidCatch</span>(<span class="params"></span>)</span> &#123; <span class="comment">// 原始写法</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">hasError</span>:<span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromError</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 精简写法，发现错误直接将返回值合并到state</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">hassError</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.state.hasError)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>error<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">About</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="React-Hooks-初始应用版本-16-8"><a href="#React-Hooks-初始应用版本-16-8" class="headerlink" title="React Hooks 初始应用版本 16.8"></a>React Hooks 初始应用版本 16.8</h1><blockquote>
<p>类组件、函数组件<br>类组件复用 渲染属性、高阶组件</p>
</blockquote>
<h2 id="类组件不足"><a href="#类组件不足" class="headerlink" title="类组件不足"></a>类组件不足</h2><ol>
<li>缺少复用机制</li>
<li>渲染属性和高阶组件导致层级冗余</li>
<li>生命周期函数混杂不相干逻辑</li>
<li>相关逻辑分散在不同生命周期</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resizeable</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">size</span>: [<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>, innerHeight],</span><br><span class="line">  &#125;;</span><br><span class="line">  onResize = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">size</span>: [<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>, innerHeight],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="built_in">this</span>.onResize);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillUnMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;resize&quot;</span>, <span class="built_in">this</span>.onResize);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.props.render(<span class="built_in">this</span>.props.size);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [width, height] = <span class="built_in">this</span>.props.size;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;width&#125;*&#123;height&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;Resizeable render=&#123;<span class="function">(<span class="params">size</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Foo</span> <span class="attr">size</span>=<span class="string">&#123;size&#125;</span> /&gt;</span></span>&#125; /&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeable</span>(<span class="params">Child</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      <span class="attr">size</span>: [<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>, innerHeight],</span><br><span class="line">    &#125;;</span><br><span class="line">    onResize = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">size</span>: [<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>, innerHeight],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="built_in">this</span>.onResize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentWillUnMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;resize&quot;</span>, <span class="built_in">this</span>.onResize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> size=<span class="built_in">this</span>.props.zise</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">size</span>=<span class="string">&#123;size&#125;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [width, height] = <span class="built_in">this</span>.props.size;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;width&#125;*&#123;height&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WrapperedFoo = resizeable(Foo)</span><br><span class="line">&lt;WrapperedFoo /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Hooks-优势"><a href="#Hooks-优势" class="headerlink" title="Hooks 优势"></a>Hooks 优势</h2><ol>
<li>函数组件无 this 问题</li>
<li>自定义 Hook 方便复用状态逻辑</li>
<li>副作用的关注点分离</li>
</ol>
<h3 id="useSate-数据状态"><a href="#useSate-数据状态" class="headerlink" title="useSate 数据状态"></a>useSate 数据状态</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="function">() =&gt;</span> props.defaultCount || <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click&#123;count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="useEffect-生命周期函数"><a href="#useEffect-生命周期函数" class="headerlink" title="useEffect 生命周期函数"></a>useEffect 生命周期函数</h3><ol>
<li>第二个参数，不传数组，每次都执行</li>
<li>空数组，每次都相同只执行一次</li>
<li>数组每一项都不变，useEfect 才不会执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = useState(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="built_in">document</span>.docmentElement.clientWidth,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">document</span>.docmentElement.clientHeight,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> onResize = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setSize(&#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="built_in">document</span>.docmentElement.clientWidth,</span><br><span class="line">      <span class="attr">height</span>: <span class="built_in">document</span>.docmentElement.clientHeight,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = count;</span><br><span class="line">  &#125;);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, onResize, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;resize&quot;</span>, onResize, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      size: &#123;size.width&#125; x &#123;size.height&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><p>函数组件使用 context 简单方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useContext, createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> CountContext = createContext();</span><br><span class="line"><span class="keyword">const</span> count = useContext(CountContext);</span><br></pre></td></tr></table></figure>

<h3 id="useMemo-amp-useCallback"><a href="#useMemo-amp-useCallback" class="headerlink" title="useMemo &amp; useCallback"></a>useMemo &amp; useCallback</h3><ol>
<li>mome 优化组件重新渲染的行为，类似于 PureComponent</li>
<li>useMemo 一段函数是否重复执行</li>
<li>与 useEffect 的区别，useEffect 渲染完成后执行，useMemo 渲染期间完成有返回值</li>
<li>useMemo(()=&gt;fn) === useCallback(fn)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> double = useMemo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">&#125;, [count === <span class="number">3</span>]); <span class="comment">// 值变化三次，所以double，为0，6，8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = memo(<span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Counter render&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span>&#123;props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> onClick = useMemo(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="keyword">const</span> onClick = useCallback(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line">&lt;Counter count=&#123;double&#125; onClick=&#123;onClick&#125; /&gt;;</span><br></pre></td></tr></table></figure>

<h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><blockquote>
<p>特性</p>
</blockquote>
<ol>
<li>获取 dom 时，只能使用在类组件上</li>
<li>函数组件不能完全替代类组件</li>
</ol>
<blockquote>
<p>作用</p>
</blockquote>
<ol>
<li>获取 dom</li>
<li>同步不同渲染周期之间的数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> counterRef = useRef();</span><br><span class="line">  <span class="keyword">const</span> it = useRef();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it.current = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(it.current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">ref</span>=<span class="string">&#123;counterRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Counter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Custom-Hooks-自定义-Hooks"><a href="#Custom-Hooks-自定义-Hooks" class="headerlink" title="Custom Hooks 自定义 Hooks"></a>Custom Hooks 自定义 Hooks</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCounter</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCount</span>(<span class="params">defaultCount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(defaultCount);</span><br><span class="line">  <span class="keyword">const</span> it = useRef();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it.current = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(it.current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> [count, setCount];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useCount(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> Counter = useCounter(count);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;Counter&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用法则"><a href="#使用法则" class="headerlink" title="使用法则"></a>使用法则</h2><ol>
<li>顶层使用</li>
<li>只在函数组件或自定义 hooks 中调用 hooks 函数</li>
</ol>
<h1 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h1><blockquote>
<p>service worker</p>
</blockquote>
<p>服务工作线程</p>
<ol>
<li>常驻内存运行</li>
<li>代理网络请求</li>
<li>依赖 https</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">navigator.serviceWorker.register(<span class="string">&quot;./sw.js&quot;</span>, &#123; <span class="attr">scope</span>: <span class="string">&quot;/&quot;</span> &#125;).then(</span><br><span class="line">  <span class="function">(<span class="params">registration</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(registration);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// sw.js</span></span><br><span class="line">self.addEventListener(<span class="string">&quot;install&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;install&quot;</span>, event);</span><br><span class="line">  event.waitUntil(self.skipWaiting()); <span class="comment">// 安装并激活新的sw</span></span><br><span class="line">&#125;);</span><br><span class="line">self.addEventListener(<span class="string">&quot;activate&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;activate&quot;</span>, event);</span><br><span class="line">  event.waitUntil(self.clients.claim()); <span class="comment">// 使网站受到sw的控制</span></span><br><span class="line">&#125;);</span><br><span class="line">self.addEventListener(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;fetch&quot;</span>, event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>web worker</p>
</blockquote>
<blockquote>
<p>fetch</p>
</blockquote>
<blockquote>
<p>Cache API</p>
</blockquote>
<blockquote>
<p>Notification API</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通知权限状态</span></span><br><span class="line">Notification.permission;</span><br><span class="line"><span class="comment">// 请求权限 必须在页面上下文中</span></span><br><span class="line">Notification.requestPermission().then(<span class="function">(<span class="params">permission</span>) =&gt;</span> <span class="built_in">console</span>.log(permission));</span><br><span class="line"><span class="comment">// 发出通知 web</span></span><br><span class="line"><span class="keyword">new</span> Notification(<span class="string">&quot;hello notification&quot;</span>, &#123; <span class="attr">body</span>: <span class="string">&quot;this is from console&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 发出通知 sw</span></span><br><span class="line">self.registration.showNotification(<span class="string">&quot;hello notification&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&quot;this is from sw&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>workbox</code> 集成化的 PWA</p>
<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ol>
<li>yarn add redux react-redux redux-thunk react-router-dom<br>// redux-thunk 让 action 可以返回函数的中间件</li>
<li>yarn add redux-logger –dev<br>//辅助 redux，可在打印中看到 redux 一切行为和数据</li>
</ol>
<h2 id="创建项目目录结构"><a href="#创建项目目录结构" class="headerlink" title="创建项目目录结构"></a>创建项目目录结构</h2><p><img src="../image/react/redux-1.webp" alt="目录结构图"></p>
<h2 id="配置-Redux（文件具体路径请看项目目录结构）"><a href="#配置-Redux（文件具体路径请看项目目录结构）" class="headerlink" title="配置 Redux（文件具体路径请看项目目录结构）"></a>配置 Redux（<font color=#ff0000>文件具体路径请看项目目录结构</font>）</h2><ol>
<li><p>actionTypes 公用属性<br><img src="../image/react/redux-2.webp" alt="actionTypes 公用 type 属性"></p>
</li>
<li><p>添加一个 action<br><img src="../image/react/redux-3.webp" alt="action 行为"></p>
</li>
<li><p>写入与 action 对应的 reducer<br><img src="../image/react/redux-4.webp" alt="处理 action 传来的信息"></p>
</li>
<li><p>合并 reducer ，便于处理 reducer 过多导致的麻烦<br><img src="../image/react/redux-5.webp" alt="合并 Reducer"></p>
</li>
<li><p>配置 store<br><img src="../image/react/redux-6.webp" alt="配置 store"></p>
</li>
<li><p>将 store 写入启动程序中<br><img src="../image/react/redux-7.webp" alt="添加 store 进根目录 index.js 中"></p>
</li>
</ol>
<h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p><img src="../image/react/redux-8.webp" alt="配置路由，并且尝试使用redux"></p>
<h1 id="redux-toolkit"><a href="#redux-toolkit" class="headerlink" title="@redux/toolkit"></a>@redux/toolkit</h1><ol>
<li>初始化 store.js</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&quot;../features/counter/counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写 reducer 切片</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// counterSlice.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createAsyncThunk, createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchCount &#125; <span class="keyword">from</span> <span class="string">&quot;./counterAPI&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认State</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;idle&quot;</span>, <span class="comment">// 异步状态</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAsync = createAsyncThunk(</span><br><span class="line">  <span class="string">&quot;counter/fetchCount&quot;</span>,</span><br><span class="line">  <span class="keyword">async</span> (amount) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetchCount(amount);</span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建切片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice = createSlice(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">// 同步</span></span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.value += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.value -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.value += action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extraReducers</span>: <span class="function">(<span class="params">builder</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异步</span></span><br><span class="line">    builder</span><br><span class="line">      .addCase(incrementAsync.pending, <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.status = <span class="string">&quot;loading&quot;</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      .addCase(incrementAsync.fulfilled, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.status = <span class="string">&quot;idle&quot;</span>;</span><br><span class="line">        state.value += action.payload;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.actions;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectCount = <span class="function">(<span class="params">state</span>) =&gt;</span> state.counter.value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementIfOdd = <span class="function">(<span class="params">amount</span>) =&gt;</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> currentValue = selectCount(getState());</span><br><span class="line">  <span class="keyword">if</span> (currentValue % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    dispatch(incrementByAmount(amount));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.reducer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// counterAPI.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchCount</span>(<span class="params">amount = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(&#123; <span class="attr">data</span>: amount &#125;), <span class="number">500</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&quot;./app/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Counter.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  decrement,</span><br><span class="line">  increment,</span><br><span class="line">  incrementByAmount,</span><br><span class="line">  incrementAsync,</span><br><span class="line">  incrementIfOdd,</span><br><span class="line">  selectCount,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./counterSlice&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&quot;./Counter.module.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = useSelector(selectCount);</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">  <span class="keyword">const</span> [incrementAmount, setIncrementAmount] = useState(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> incrementValue = <span class="built_in">Number</span>(incrementAmount) || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.row&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&#123;styles.button&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">aria-label</span>=<span class="string">&quot;Decrement value&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;</span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">          -</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;styles.value&#125;</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&#123;styles.button&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">aria-label</span>=<span class="string">&quot;Increment value&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;</span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">          +</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.row&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&#123;styles.textbox&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">aria-label</span>=<span class="string">&quot;Set increment amount&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">value</span>=<span class="string">&#123;incrementAmount&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setIncrementAmount(e.target.value)&#125;</span></span><br><span class="line"><span class="xml">        /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&#123;styles.button&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(incrementByAmount(incrementValue))&#125;</span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">          Add Amount</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&#123;styles.asyncButton&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(incrementAsync(incrementValue))&#125;</span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">          Add Async</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&#123;styles.button&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(incrementIfOdd(incrementValue))&#125;</span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">          Add If Odd</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
